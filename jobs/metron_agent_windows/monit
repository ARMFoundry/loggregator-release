<%
  job_name = spec.job.name || name
  instance_id = spec.id || spec.index.to_s
  instance_zone = p("metron_agent.zone").empty? ? spec.az : p("metron_agent.zone")
  deployment = p("metron_agent.deployment").empty? ? spec.deployment : p("metron_agent.deployment")
  router_addr = p("metron_agent.bosh_dns") ? link("doppler").address : p("doppler.addr")

  router_addr_with_az = "#{instance_zone}.#{p("doppler.addr")}"
  if p("metron_agent.bosh_dns")
      router_addr_with_az = link("doppler").address(azs: [spec.az])
  end

  tags = {
      deployment: deployment,
      job: job_name,
      index: instance_id,
      ip: spec.ip,
  }
  tags.merge!(p("metron_agent.tags"))

  env = {
    "__PIPE_SYSLOG_HOST" => p('syslog_daemon_config.address'),
    "__PIPE_SYSLOG_PORT" => p('syslog_daemon_config.port'),
    "__PIPE_SYSLOG_TRANSPORT" => p('syslog_daemon_config.transport'),
    "AGENT_PORT" => "#{p("metron_agent.grpc_port")}",
    "AGENT_CA_FILE" => "/var/vcap/jobs/metron_agent_windows/config/certs/loggregator_ca.crt",
    "AGENT_CERT_FILE" => "/var/vcap/jobs/metron_agent_windows/config/certs/metron_agent.crt",
    "AGENT_KEY_FILE" => "/var/vcap/jobs/metron_agent_windows/config/certs/metron_agent.key",
    "AGENT_CIPHER_SUITES" => p("loggregator.tls.cipher_suites").split(":").join(","),
    "AGENT_DEPLOYMENT" => deployment,
    "AGENT_ZONE" => instance_zone,
    "AGENT_JOB" => job_name,
    "AGENT_INDEX" => instance_id,
    "AGENT_IP" => spec.ip,
    "AGENT_TAGS" => tags.map { |k, v| "#{k}:#{v}" }.join(","),
    "AGENT_DISABLE_UDP" => "#{p("metron_agent.disable_udp")}",
    "AGENT_INCOMING_UDP_PORT" => "#{p("metron_agent.listening_port")}",
    "AGENT_HEALTH_ENDPOINT_PORT" => "#{p("metron_agent.health_port")}",
    "AGENT_PPROF_PORT" => "#{p("metron_agent.pprof_port")}",
    "ROUTER_ADDR" => "#{router_addr}:#{p('doppler.grpc_port')}",
    "ROUTER_ADDR_WITH_AZ" => "#{router_addr_with_az}:#{p('doppler.grpc_port')}",
  }

  monit = {
    "processes" => [
      {
        "name" => "metron_agent",
        "executable" => "/var/vcap/packages/metron_agent_windows/metron.exe",
        "args" => [],
        "env" => env
      }
    ]
  }
%>

<%= JSON.pretty_generate(monit) %>
